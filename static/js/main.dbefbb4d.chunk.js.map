{"version":3,"sources":["components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","api/api.js","api/comments.js","components/PostDetails/PostDetails.jsx","api/posts.js","App.jsx","api/users.js","index.js"],"names":["PostsList","posts","onSelectedPost","selectedPostId","className","map","post","key","id","userId","title","type","onClick","NewCommentForm","addNewComment","postId","useState","name","setName","email","setEmail","commentText","setCommentText","newComment","body","placeholder","value","onChange","e","target","BASE_URL","request","url","fetch","then","res","json","result","data","getPostComments","postID","filter","comment","PostDetails","userPost","setUserPost","postComments","setPostComments","showComments","setShowComments","useEffect","fetchPostComments","commentsFromServer","deleteSelectedComment","commentId","method","removeComment","comments","commentObj","a","headers","JSON","stringify","length","App","setPosts","setUserId","users","setUsers","setSelectedPostId","getUserPosts","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dbefbb4d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nexport const PostsList = ({ posts, onSelectedPost, selectedPostId }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {\n        posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>\n                [User #\n                {post.userId}\n                ]:\n                {' '}\n              </b>\n              {post.title}\n            </div>\n            {\n              selectedPostId === post.id\n                ? (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => onSelectedPost(0)}\n                  >\n                    Close\n                  </button>\n                )\n                : (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => onSelectedPost(post.id)}\n                  >\n                    Open\n                  </button>\n                )\n            }\n          </li>\n        ))\n      }\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n  })).isRequired,\n  onSelectedPost: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ addNewComment, postId }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [commentText, setCommentText] = useState('');\n\n  const newComment = {\n    postId,\n    body: commentText,\n    email,\n    name,\n  };\n\n  return (\n    <form className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={e => setName(e.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={e => setEmail(e.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={commentText}\n          onChange={e => setCommentText(e.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"button\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={() => {\n          addNewComment(newComment);\n          setName('');\n          setEmail('');\n          setCommentText('');\n        }}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  addNewComment: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = url => fetch(`${BASE_URL}${url}`)\n  .then(res => res.json()).then(result => result.data);\n","import { BASE_URL } from './api';\n\nexport const getPostComments = postID => fetch(`${BASE_URL}/comments`)\n  .then(res => res.json()).then(result => result.data\n    .filter(comment => comment.postId === postID));\n\nexport const removeComment\n  = commentId => fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n\nexport const addComment = comment => fetch(`${BASE_URL}/comments`, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(comment),\n});\n\nexport const addTodo = () => (\n  fetch('https://mate-api.herokuapp.com/goods', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(\n      {\n        name: 'Potato',\n        color: 'red',\n      },\n    ),\n  })\n);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './PostDetails.scss';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\nimport { addComment, removeComment, getPostComments } from '../../api/comments';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [userPost, setUserPost] = useState(0);\n  const [postComments, setPostComments] = useState([]);\n  const [showComments, setShowComments] = useState(true);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId).then(setUserPost);\n\n    fetchPostComments();\n  }, [selectedPostId]);\n\n  const fetchPostComments = () => {\n    getPostComments(selectedPostId)\n      .then(commentsFromServer => setPostComments(\n        commentsFromServer,\n      ));\n\n    getPostComments(selectedPostId);\n  };\n\n  const deleteSelectedComment = (commentId) => {\n    removeComment(commentId);\n\n    setPostComments(comments => comments\n      .filter(comment => comment.id !== commentId));\n  };\n\n  const addNewComment = async(commentObj) => {\n    await addComment(commentObj);\n\n    fetchPostComments();\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>\n          User #\n          {userPost.userId}\n        </p>\n        <p>{userPost.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => setShowComments(!showComments)}\n        >\n          {\n            !showComments ? 'Show ' : 'Hide '\n          }\n          {postComments.length}\n          {' '}\n          comments\n        </button>\n        <br />\n        {\n          showComments\n            ? (\n              <ul className=\"PostDetails__list\">\n                {\n                  postComments\n                && postComments.map(comment => (\n                  <li className=\"PostDetails__list-item\" key={comment.id}>\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => deleteSelectedComment(comment.id)}\n                    >\n                      X\n                    </button>\n                    <p>\n                      {comment.body\n                        ? comment.body : deleteSelectedComment(comment.id)}\n                    </p>\n                    <hr />\n                    <b className=\"comment__name\">{comment.name}</b>\n                  </li>\n                ))\n                }\n              </ul>\n            ) : <p>{' '}</p>\n        }\n      </section>\n\n      <section>\n        <br />\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            addNewComment={addNewComment}\n            postId={selectedPostId}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import { request } from './api';\n\nexport const getUserPosts = userId => request(`/posts?userId=${userId}`);\n\nexport const getAllPosts = () => request('/posts');\n\nexport const getPostDetails = postId => request(`/posts/${postId}`);\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts, getAllPosts } from './api/posts';\nimport { getUsers } from './api/users';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [userId, setUserId] = useState(0);\n  const [users, setUsers] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    if (userId === 0) {\n      getAllPosts().then(setPosts);\n    } else {\n      getUserPosts(userId).then(setPosts);\n    }\n\n    getUsers().then(setUsers);\n  }, [userId]);\n\n  const setPostId = (postId) => {\n    setSelectedPostId(postId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={userId}\n            onChange={e => setUserId(+e.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            {\n              users.map(user => (\n                user.id <= 10\n                  && (\n                    <option\n                      key={user.id}\n                      value={user.id}\n                    >\n                      {user.name}\n                    </option>\n                  )\n              ))\n            }\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            onSelectedPost={setPostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {\n            selectedPostId !== 0\n              && (\n                <PostDetails\n                  selectedPostId={selectedPostId}\n                />\n              )\n          }\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport const getUsers = () => request('/users');\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}